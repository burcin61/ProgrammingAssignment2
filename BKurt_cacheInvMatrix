
makeCacheMatrix <- function(x = matrix()) {
  ## x: a square invertible matrix
  ## return: a list containing functions to
  ##              1. set the matrix
  ##              2. get the matrix
  ##              3. set the inverse
  ##              4. get the inverse
  ##         this list is used as the input to cacheSolve()
  
  inv = NULL
  set = function(y) {
     
    x <<- y
    inv <<- NULL
  }
  get = function() x
  setinv = function(inverse) inv <<- inverse 
  getinv = function() inv
  list(set=set, get=get, setinv=setinv, getinv=getinv)
}


cacheSolve <- function(x, ...) {
  ## x: output of makeCacheMatrix()
  ## return: inverse of the original matrix input to makeCacheMatrix()
  
  inv = x$getinv()
  
  # if the inverse has already been calculated
  if (!is.null(inv)){
    # get it from the cache and skips the computation. 
    message("getting cached data")
    return(inv)
  }
  
  # otherwise, calculates the inverse 
  mat.data = x$get()
  inv = solve(mat.data, ...)
  
  # sets the value of the inverse in the cache via the setinv function.
  x$setinv(inv)
  
  return(inv)
}

## Example
## > r = rnorm(100)
## > mat = matrix(r, nrow=4, ncol=4)
## > mym<-makeCacheMatrix(mat)
## >mym$get()
## [,1]       [,2]       [,3]       [,4]
## [1,] -0.01001104  0.7910336 -1.4233124  0.7016979
## [2,]  2.54145717 -1.6875172 -0.3148226 -1.4845090
## [3,] -1.05400536  1.4405279 -1.1764261  0.6053226
## [4,] -2.15327604 -0.6916809  0.3305933  1.5138752

## compute the inv of the matrix because it has not computed before and 
## sets the value of the inverse in the cache
## >cacheSolve(mym)
## [,1]       [,2]       [,3]        [,4]
## [1,] 0.95573007 -0.3886381 -1.1541903 -0.36258802
## [2,] 0.17403741 -0.4956693 -0.2132152 -0.48146850
## [3,] 0.08739431 -0.5930685 -0.8736963 -0.27272510
## [4,] 1.41982444 -0.6497402 -1.5482974 -0.01559809


## get the inv of the matrix from the cache as it has been computed before
## > cacheSolve(mym)
## getting cached data
#3 [,1]       [,2]       [,3]        [,4]
## [1,] 0.95573007 -0.3886381 -1.1541903 -0.36258802
## [2,] 0.17403741 -0.4956693 -0.2132152 -0.48146850
## [3,] 0.08739431 -0.5930685 -0.8736963 -0.27272510
## [4,] 1.41982444 -0.6497402 -1.5482974 -0.01559809

